package org.apache.james.gatling.smtp

import io.gatling.core.action.{Action, ExitableActorDelegatingAction}
import io.gatling.core.action.builder.ActionBuilder
import io.gatling.core.structure.ScenarioContext
import org.apache.james.gatling.smtp.SmtpProtocol.SmtpComponents
import io.gatling.core.util.NameGen

case class QueueActionBuilder(name: String,
                              _waitForEmptyness: Boolean = False) extends ActionBuilder with NameGen {

  def waitForEmptyness() = _waitForEmptyness = True

  override def build(ctx: ScenarioContext, next: Action): Action = {
    val components: SmtpComponents = ctx.protocolComponentsRegistry.components(SmtpProtocol.SmtpProtocolKey)

    val smtpProps = SmtpAction.props(name, ctx.coreComponents.statsEngine, next, components.protocol)
    val actionActor = ctx.system.actorOf(smtpProps)
    new ExitableActorDelegatingAction(genName(name), ctx.coreComponents.statsEngine, next, actionActor)
  }
}
